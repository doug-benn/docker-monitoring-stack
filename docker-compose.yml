name: docker-monitoring-stack

x-logging: &default-logging
  driver: 'json-file'
  options:
    max-size: '1m'
    max-file: '1'
    tag: '{{.Name}}'

x-common-labels: &default-labels
  logging: 'promtail'
  logging_jobname: 'containerlogs'
  stackname: 'docker-monitoring-stack'

services:
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_LOG_MODE=console
      - GF_LOG_LEVEL=critical
      - GF_PANELS_ENABLE_ALPHA=true
      - GF_FEATURE_TOGGLES_ENABLE=accessControlOnCall lokiLogsDataplane
      - GF_INSTALL_PLUGINS=grafana-polystat-panel,https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app
    volumes:
      - ./configs/grafana/:/etc/grafana/provisioning/:ro
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    cpus: 0.5
    mem_limit: 512m
    networks:
      - monitoring
    labels:
      <<: *default-labels
    logging: *default-logging

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--log.level=error'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.external-url=http://localhost:9090'
    volumes:
      - ./configs/prometheus/:/etc/prometheus/
      # - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      # - ./configs/prometheus/recording-rules.yml:/etc/prometheus/recording-rules.yml
      # - ./configs/prometheus/alerting-rules.yml:/etc/prometheus/alerting-rules.yml
      - prometheus-data:/prometheus
    depends_on:
      - alertmanager
    ports:
      - 9090:9090
    cpus: 0.5
    mem_limit: 512m
    networks:
      - monitoring
    labels:
      <<: *default-labels
    logging: *default-logging

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
        # https://github.com/google/cadvisor/issues/1565#issuecomment-718812180
      - /var/run/docker.sock:/var/run/docker.sock
      #- /dev/disk:/dev/disk:ro
    cpus: 0.5
    mem_limit: 512m
    networks:
      - monitoring
    labels:
      <<: *default-labels
    logging: *default-logging

  node-exporter:
    image: prom/node-exporter:${NODE_EXPORTER_VERSION:-v1.5.0}
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points'
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    cpus: 0.5
    mem_limit: 512m
    networks:
      - monitoring
    labels:
      <<: *default-labels
    logging: *default-logging

  alertmanager:
    image: prom/alertmanager:v0.28.1
    container_name: alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--log.level=error'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    volumes:
      - ./configs/alertmanager/alertmanager-fallback-config.yml:/etc/alertmanager/config.yml
      - alertmanager-data:/alertmanager
    ports:
      - 9093:9093
    cpus: 0.5
    mem_limit: 512m
    networks:
      - monitoring
    depends_on:
      - uncomplicated-alert-receiver
    labels:
      <<: *default-labels
    logging: *default-logging

  uncomplicated-alert-receiver:
    image: ghcr.io/jamesread/uncomplicated-alert-receiver
    container_name: uncomplicated-alert-receiver
    ports:
      - 9094:8080
    cpus: 0.5
    mem_limit: 512m
    networks:
      - monitoring
    labels:
      <<: *default-labels
    logging: *default-logging

  loki:
    image: grafana/loki:3.3.2
    container_name: loki
    user: root
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/loki.yaml
    volumes:
      - ./configs/loki/loki.yaml:/etc/loki/loki.yaml
      - ./configs/loki/rules.yaml:/etc/loki/rules/fake/loki-rules.yml
    cpus: 0.5
    mem_limit: 512m
    networks:
      - monitoring
    labels:
      <<: *default-labels
    logging: *default-logging

  promtail:
    image: grafana/promtail:3.3.2
    container_name: promtail
    volumes:
      - ./configs/promtail/promtail.yaml:/etc/promtail/docker-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/docker-config.yaml
    depends_on:
      - loki
    cpus: 0.5
    mem_limit: 512m
    networks:
      - monitoring
    labels:
      <<: *default-labels
    logging: *default-logging

  ### Exporters ###
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: 'postgresql://${POSTGRES_USER}:${POSTGRES_PW}@postgres:5432/${POSTGRES_DB}?sslmode=disable'
    cpus: 0.5
    mem_limit: 512m
    networks:
      - monitoring
    labels:
      <<: *default-labels
    logging: *default-logging

  nginx-prometheus-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: prometheus-nginx-exporter
    restart: unless-stopped
    depends_on:
      - nginx
      - prometheus
    command:
      - --nginx.scrape-uri=http://nginx/stub_status
    cpus: 0.5
    mem_limit: 512m
    networks:
      - monitoring
    ports:
      - '9113:9113'
    labels:
      <<: *default-labels
    logging: *default-logging

  #################

  ### DEMO APPLICATIONS ###
  postgres:
    container_name: postgres
    image: postgres:17.4-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PW}
      - POSTGRES_DB=${POSTGRES_DB} #optional (specify default database instead of $POSTGRES_DB)
    ports:
      - '5432:5432'
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready  -U ${POSTGRES_USER}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - monitoring
    labels:
      <<: *default-labels
    logging: *default-logging

  nginx:
    container_name: nginx
    image: nginx:latest
    depends_on:
      - app
    ports:
      - '80:80'
      #- '8080:8080'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - monitoring
    labels:
      <<: *default-labels
    logging: *default-logging

  app:
    build:
      context: ./demo-app
      dockerfile: Dockerfile
    restart: unless-stopped
    deploy:
      replicas: 3
    networks:
      - monitoring
    labels:
      <<: *default-labels
    logging: *default-logging

#########################

volumes:
  grafana-data:
  prometheus-data:
  alertmanager-data:
  # Demo
  postgres-data:

networks:
  monitoring:
    name: monitoring
